# vim: ts=4:sw=4:et:cc=120
import hashlib

from saq.analysis import Analysis, Observable
from saq.system import ACESystemInterface, get_system

def generate_cache_key(observable: Observable, analysis_module_type: AnalysisModuleType) -> str:
    """Returns the key that should be used for caching the result of the
    analysis generated by this analysis module type against this observable."""
    if analysis_module_type.cache_ttl == 0:
        return None

    h = hashlib.sha256()
    h.update(observable.type)
    h.update(observable.value)
    if observable.time:
        h.update(observable.time)

    h.update(analysis_module_type.name)
    h.update(analysis_module_type.version)

    for key in analysis_module_type.additional_cache_keys:
        h.update(key)

    return h.hexdigest()

class CachingInterface(ACESystemInterface):
    def get_cached_analysis(self, cache_key: str) -> Union[dict, None]:
        raise NotImplementedError()

    def cache_analysis(self, cache_key: str, analysis: dict, expiration: Optional[int]) -> str:
        raise NotImplementedError()

def get_cached_analysis(observable: Observable, analysis_module_type: AnalysisModuleType) -> Union[Analysis, None]:
    cache_key = generate_cache_key(observable, analysis_module_type)
    if cache_key is None:
        return None

    json_data = get_system().caching.get_cached_analysis(cache_key)
    if json_data is None:
        return None

    return Analysis.from_json(json_data)

def cache_analysis(observable: Observable, analysis_module_type: AnalysisModuleType, analysis: Analysis) -> Union[str, None]:
    cache_key = generate_cache_key(observable, analysis_module_type)
    if cache_key is None:
        return None

    return get_system().caching.cache_analysis(cache_key, analysis.to_json())
