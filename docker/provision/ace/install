#!/usr/bin/env bash
#
# this scripts configures a source installation of ACE
# which is just ACE running directly from a clone of the repository
# instead of being "installed" into some other directory
#

function fail() {
    echo "installation failed: $1"
    exit 1
}

for d in \
    data \
    etc/snort \
    work 
do
    if [ ! -d "$d" ]
    then
        echo "creating directory $d"
        ( mkdir -p "$d" && chown $SAQ_USER:$SAQ_GROUP "$d" ) || fail "cannot create directory $d"
    fi
done

# set up environment
cat >> ~ace/.profile<<EOF
source venv/bin/activate
source $SAQ_HOME/load_environment
EOF

cat >> $SAQ_HOME/load_local_environment<<EOF
export SAQ_ENC=ace
EOF

source venv/bin/activate
source $SAQ_HOME/load_environment

#cp -a etc/saq.example.ini etc/saq.ini || fail "unable to configure saq.local.ini"
if [ ! -e etc/brotex.whitelist ]
then
    cp -a etc/brotex.whitelist.sample etc/brotex.whitelist || fail "unable to configure brotex.whitelist"
fi

if [ ! -e etc/startup ]
then
    cp -a etc/startup.example etc/startup || fail "unable to configure startup"
fi

if [ ! -e etc/remote_assignments.yar ]
then
    cp etc/remote_assignments.example.yar etc/remote_assignments.yar
fi

if [ ! -e etc/blacklist.yar ]
then
    cp etc/blacklist.example.yar etc/blacklist.yar
fi

if [ ! -e etc/amc_mda.ini ]
then
    cp etc/amc_mda.example.ini etc/amc_mda.ini
fi

if [ ! -e etc/amc_client.ini ]
then
    cp etc/amc_client.example.ini etc/amc_client.ini
fi

echo "generating random secret key for flask"
tr -cd '[:alnum:]' < /dev/urandom | fold -w30 | head -n1 > .gui_secret_key.sed
sed -i -e 's;^;s/ACE_SECRET_KEY/;' -e 's;$;/g;' .gui_secret_key.sed
sed -i -f .gui_secret_key.sed etc/saq.ini
rm .gui_secret_key.sed

# create various directories and files
# XXX clean this up
for path in etc/site_tags.csv etc/ssdeep_hashes
do
	if [ ! -e "${path}" ]; then touch "${path}"; fi
done

if [ ! -e etc/organization.json ]; then echo '{}' > etc/organization.json; fi
if [ ! -e etc/local_networks.csv ]; then echo 'Indicator,Indicator_Type' > etc/local_networks.csv; fi

# create our ssl certs
#./docker/provision/ace/install_ssl_certs.sh

# build the documentation
#( cd docs && make html )

#activate-global-python-argcomplete
ln -s /opt/signatures /opt/ace/etc/yara
cp etc/saq.docker.ini etc/saq.ini

for l in api apache
do
	if [ ! -e etc/$l\_logging.ini ]
	then
		cp -a etc/$l\_logging.example.ini etc/$l\_logging.ini || fail "unable to copy logging config for $l"
	fi
done
